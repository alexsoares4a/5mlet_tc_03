import streamlit as st
from datetime import date, timedelta
import numpy as np
import pandas as pd
import plotly.graph_objects as go
from tensorflow.keras.models import load_model
from sklearn.preprocessing import MinMaxScaler
import os

# Configurar t√≠tulo e √≠cone da p√°gina
st.set_page_config(
    page_title="üîÆ Previs√£o do Pre√ßo do Bitcoin",
    page_icon="‚Çø",
    layout="wide"
)

# T√≠tulo do app
st.title("üìä Dashboard de Previs√£o do Pre√ßo do Bitcoin (BTC-USD)")
st.markdown("Modelo: **LSTM** | Fonte: CoinGecko API | Atualizado diariamente")

# --- Fun√ß√µes Auxiliares ---
@st.cache_data
def carregar_dados():
    """Carrega dados hist√≥ricos do Bitcoin com ex√≥genas"""
    if os.path.exists("data/btc_historical.parquet"):
        df = pd.read_parquet("data/btc_historical.parquet")
        df.index = pd.to_datetime(df.index)
        df.sort_index(inplace=True)
        
        # Renomear para padronizar
        df = df.rename(columns={'btc_close': 'Close'})
        return df[['Close', 'fgi', 'eth_close', 'dxy']]
    else:
        st.error("Dados n√£o encontrados. Execute o coletor primeiro.")
        return None

@st.cache_resource
def carregar_modelo():
    """Carrega o modelo LSTM treinado"""
    try:
        model = load_model('models/lstm_bitcoin.keras')
        st.success("‚úÖ Modelo LSTM carregado com sucesso!")
        return model
    except Exception as e:
        st.error(f"‚ùå Erro ao carregar o modelo: {e}")
        return None

def preparar_entrada(dados, scaler, seq_length=20):
    """Prepara a √∫ltima sequ√™ncia de dados para previs√£o"""
    ultimos_dados = dados['Close'].tail(seq_length).values.reshape(-1, 1)
    dados_normalizados = scaler.transform(ultimos_dados)
    X = np.reshape(dados_normalizados, (1, seq_length, 1))
    return X

def gerar_previsoes(modelo, scaler, dados, num_dias=7):
    """
    Gera previs√µes para os pr√≥ximos dias.
    - modelo: modelo LSTM carregado
    - scaler: MinMaxScaler ajustado nos dados
    - dados: DataFrame com colunas ['Close', 'fgi', 'eth_close', 'dxy']
    - num_dias: n√∫mero de dias √† frente
    """
    seq_length = 20
    n_features = 4  # btc_close, fgi, eth_close, dxy

    # Extrair os √∫ltimos 'seq_length' dias de todas as features
    ultimos_dados = dados[['Close', 'fgi', 'eth_close', 'dxy']].tail(seq_length).values
    entrada = scaler.transform(ultimos_dados)  # Normalizar

    previsoes = []
    datas = []

    ultimo_dia = dados.index[-1]
    current_date = ultimo_dia + timedelta(days=1)

    while len(previsoes) < num_dias:
        # Garantir que entrada tenha shape (1, 20, 4)
        X = entrada.reshape(1, seq_length, n_features)
        
        # Fazer previs√£o (s√≥ prevemos o Close)
        pred = modelo.predict(X, verbose=0)[0, 0]

        # Armazenar previs√£o (s√≥ o Close)
        previsoes.append(pred)
        datas.append(current_date)

        # Atualizar entrada: remover primeiro dia, adicionar novo dia
        # Para as ex√≥genas, usamos os √∫ltimos valores conhecidos (ou proje√ß√µes simples)
        novo_dia = np.array([
            pred,  # Close previsto (ser√° normalizado depois)
            entrada[-1, 1],  # fgi: √∫ltimo valor
            entrada[-1, 2],  # eth_close: √∫ltimo valor
            entrada[-1, 3]   # dxy: √∫ltimo valor
        ])
        
        entrada = np.vstack([entrada[1:], novo_dia])

        current_date += timedelta(days=1)

    # Reverter escala das previs√µes (Close)
    dummy = np.zeros((len(previsoes), 3))  # 3 outras features
    previsoes_escaladas = scaler.inverse_transform(np.hstack([np.array(previsoes).reshape(-1, 1), dummy]))[:, 0]
    
    return datas, previsoes_escaladas

# --- Carregar recursos ---
df = carregar_dados()
modelo = carregar_modelo()

if df is None or modelo is None:
    st.stop()

# Inicializar scaler com os dados
from joblib import load
scaler = load('models/scaler_bitcoin.pkl')
st.success("‚úÖ Scaler carregado com 4 features")

# --- Sidebar: Entrada do usu√°rio ---
st.sidebar.header("‚öôÔ∏è Configura√ß√µes")
num_dias = st.sidebar.slider("Dias √† frente:", min_value=1, max_value=30, value=7)
fazer_previsao = st.sidebar.button("üöÄ Gerar Previs√£o")

# --- Abas ---
tab1, tab2, tab3 = st.tabs(["üìà Previs√£o", "üîç Dados Hist√≥ricos", "‚ÑπÔ∏è Sobre"])

# --- Aba 1: Previs√£o ---
with tab1:
    st.subheader("üîÆ Previs√£o Futura do Bitcoin")

    if fazer_previsao:
        with st.spinner("Gerando previs√µes..."):
            try:
                datas_futuras, previsoes = gerar_previsoes(modelo, scaler, df, num_dias)

                # Criar DataFrame de previs√µes
                df_pred = pd.DataFrame({
                    'Data': datas_futuras,
                    'Previs√£o (USD)': previsoes
                })

                # Mostrar tabela
                st.write("### üìÖ Previs√µes")
                st.dataframe(df_pred.style.format({"Previs√£o (USD)": "US$ {:,.2f}"}))

                # Gr√°fico com Plotly
                fig = go.Figure()

                # Hist√≥rico
                fig.add_trace(go.Scatter(
                    x=df.index, y=df['Close'],
                    mode='lines', name='Hist√≥rico',
                    line=dict(color='blue')
                ))

                # Previs√µes
                fig.add_trace(go.Scatter(
                    x=datas_futuras, y=previsoes,
                    mode='lines+markers', name='Previs√£o',
                    line=dict(color='orange', dash='dot'),
                    marker=dict(size=6)
                ))

                fig.update_layout(
                    title='Pre√ßo do Bitcoin: Hist√≥rico e Previs√£o',
                    xaxis_title='',
                    yaxis_title='Pre√ßo (USD)',
                    hovermode='x unified',
                    legend=dict(x=0, y=1)
                )

                st.plotly_chart(fig, use_container_width=True)

                # Destaque da pr√≥xima previs√£o
                proxima = previsoes[0]
                st.success(f"**Pr√≥ximo fechamento estimado: US$ {proxima:,.2f}**")

            except Exception as e:
                st.error(f"Erro na gera√ß√£o de previs√£o: {e}")

    else:
        st.info("üëà Ajuste as configura√ß√µes na barra lateral e clique em 'Gerar Previs√£o'.")

# --- Aba 2: Dados Hist√≥ricos ---
with tab2:
    st.subheader("üìä Dados Hist√≥ricos do Bitcoin")
    st.write(f"Per√≠odo: {df.index[0].strftime('%d/%m/%Y')} at√© {df.index[-1].strftime('%d/%m/%Y')}")
    st.write(f"Total de registros: {len(df)}")

    # Estat√≠sticas
    col1, col2, col3, col4 = st.columns(4)
    col1.metric("Atual", f"US$ {df['Close'].iloc[-1]:,.2f}")
    col2.metric("M√©dia", f"US$ {df['Close'].mean():,.2f}")
    col3.metric("M√≠nimo", f"US$ {df['Close'].min():,.2f}")
    col4.metric("M√°ximo", f"US$ {df['Close'].max():,.2f}")

    # Gr√°fico de hist√≥rico
    st.line_chart(df['Close'])

# --- Aba 3: Sobre ---
with tab3:
    st.subheader("‚ÑπÔ∏è Sobre este Projeto")
    st.write("""
    Este dashboard faz parte do **Tech Challenge da FIAP - P√≥s em Machine Learning Engineering**.
    
    **Objetivo**: Prever o pre√ßo de fechamento di√°rio do Bitcoin usando um modelo LSTM.
    
    **Tecnologias utilizadas**:
    - `yfinance` / `CoinGecko API`: Coleta de dados
    - `TensorFlow/Keras`: Treinamento do modelo LSTM
    - `Streamlit`: Interface web interativa
    - `Plotly`: Visualiza√ß√µes din√¢micas
    
    **Modelo Campe√£o**: LSTM (R¬≤ = ~84%)
    
    O modelo foi treinado com dados dos √∫ltimos 90 dias e utiliza janelas de 20 dias para prever o pr√≥ximo fechamento.
    
    **Fonte de dados**: [CoinGecko API](https://www.coingecko.com/en/api)
    """)

    st.markdown("---")
    st.caption("Desenvolvido por: Alex Soares da Silva, RM354660")